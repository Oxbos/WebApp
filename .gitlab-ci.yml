include:
    - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
    - template: Jobs/SAST.latest.gitlab-ci.yml
    - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
    # - template: Jobs/Container-Scanning.latest.gitlab-ci.yml

stages:
    - test
    - build
    - security-scans
    - deploy
    - create-release

variables:
    IMAGE_REPOSITORY: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}
    IMAGE_TAG: build.${CI_PIPELINE_IID}-${CI_COMMIT_SHORT_SHA}
    IMAGE: ${IMAGE_REPOSITORY}:${IMAGE_TAG}
    IMAGE_LATEST: "${IMAGE_REPOSITORY}:latest"
    TRIGGER_REDEPLOY: "false"
    VERSION_REGEX: /^v(\d+\.)?(\d+\.)?(\*|\d+)$/
    CREATE_RELEASE_TAG:
        value: "false"
        options:
            - "true"
            - "false"
        description: "Create release tag"

semgrep-sast:
    stage: security-scans
    allow_failure: false
    rules:
        - if: $CI_COMMIT_TAG !~ $VERSION_REGEX && $CI_PIPELINE_SOURCE == 'push'

secret_detection:
    stage: security-scans
    allow_failure: false
    rules:
        - if: $CI_COMMIT_TAG !~ $VERSION_REGEX && $CI_PIPELINE_SOURCE == 'push'

gemnasium-python-dependency_scanning:
    stage: security-scans
    allow_failure: false
    before_script: []
    rules:
        - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

# container_scanning:
#     stage: security-scans
#     allow_failure: false
#     variables:
#         CS_IMAGE: $IMAGE_LATEST
#     rules:
#         - if: $CI_COMMIT_TAG =~ $VERSION_REGEX || $CI_PIPELINE_SOURCE == 'merge_request_event'

build-app:
    stage: build
    rules:
        - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_REF_NAME =~ "/^v(\d+\.)?(\d+\.)?(\*|\d+)$/" || $CI_COMMIT_REF_NAME == "develop"
          when: always
          allow_failure: false
          exists:
              - Dockerfile
        - when: never
    image:
        name: gcr.io/kaniko-project/executor:v1.9.0-debug
        entrypoint: [""]
    before_script: []
    script:
        - /kaniko/executor
          --context "${CI_PROJECT_DIR}"
          --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
          --destination $IMAGE
          --destination $IMAGE_LATEST
